PROMPT MERGE

In this file is a draft idea and prompt for generation of codes and script for making the dictionary file. 


PLDTWIFI Wordlist Dictionary
can you compose a code that is in Python language in which this script that outputs a text file for password dictionary, in which password is generally 13 digits/characters long, the first 8 is static meaning do not change which is "PLDTWIFI" and the last 5 remaining digits/characters are composed of randomly generated of uppercase, lowercase, and numbers. 

When running the program, it can be accessed using the command terminal or powershell in which it takes the name of the file, the file directory in which where the output file will be put, the number of lines of how many password will generate, and lastly how many batch of file to make. 

Remember the default command and its parameter is "python pldtwifiFIBR.py "output\file\location" "output_file_name.txt" <number of lines> <number of batches> where:
python - is the language and program used to run the script
pldtwifiFIBR.py - is the script to generate the wordlist for the PLDTWIFI
"output\file\location" - is the location of the file where will be the output
"output_file_name.txt" - is the name of the file
<number of lines> - is how many lines in a wordlist per files, note it must be in whole number integer if not there should be a handle for this error that displaying "Invalid <number of lines> please specify correctly!"
<number of batch> - is how many batch will generate along with its numbered file as mentioned earlier, note it must be in whole number integer if not there should be a handle for this error that displaying "Invalid <number of batch> please specify correctly!". In this example is 5 so the program will produce 5 (by default) wordlist textfile with a numbered at the end to avoid overlapping of names of the file like this format: "pldtlib_1.txt" "pldtlib_2.txt" "pldtlib_3.txt" "pldtlib_4.txt" "pldtlib_5.txt".

In addition, the output generated lines must not have duplication of its own and also for its files.

Remember when a batch is finished it will saved automatically to the specified directory do not as one output to avoid the resources to overwhelm. then once a batch finished the script will loop again and again up until the specified batch number is finished. Also based on the existing code can you implement multiprocessing


Can you also add a progress loading indicator where there is a bar like this "######" along with its percentage for generating a single batch, and also make a loading indicator bar like this when its done it will output a success display like this "######" for the overall process. For example:
pldtlib_3.txt [######-------]
batch 3 of 5 [#########---] 

"Your library [name of the file] is successfully generated. Time [starting and ending time] with duration of [duration how long the password generation in this format HH:MM:SS]"

Updated Source Code:
import random
import string
import os
import sys
import time
from datetime import datetime
from multiprocessing import Pool, cpu_count

# Default parameters
DEFAULT_DIRECTORY = r"D:\Documents\PROGRAMMING FILES\Wifi Hacking\dictionaries\PLDTDictionaries"
DEFAULT_FILENAME = "pldtlib.txt"
DEFAULT_NUM_LINES = <number of lines>
DEFAULT_NUM_BATCHES = <number of batches>
STATIC_PART = "PLDTWIFI"


def generate_passwords(num_lines):
    """Generates a set of unique passwords with a static part and a random part."""
    passwords = set()
    while len(passwords) < num_lines:
        random_part = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=5))
        password = STATIC_PART + random_part
        passwords.add(password)
    return passwords


def save_passwords_to_file(args):
    """Saves the generated passwords to a text file."""
    passwords, file_path, batch_num, num_batches = args
    
    # Save the passwords to the specified file
    with open(file_path, 'w') as file:
        for password in passwords:
            file.write(password + '\n')
    
    # Simulate progress bar for each batch
    display_progress_bar(batch_num, num_batches, prefix=f"batch {batch_num} of {num_batches}")
    return batch_num


def display_progress_bar(progress, total, prefix=''):
    """Displays a progress bar with the percentage of completion."""
    bar_length = 50  # Adjust this for a shorter or longer bar
    block = int(round(bar_length * progress / total))
    percentage = round(progress / total * <number of batches>0, 1)
    progress_bar = "#" * block + "-" * (bar_length - block)
    sys.stdout.write(f"\r{prefix} [{progress_bar}] {percentage}%")
    sys.stdout.flush()


def process_batch(batch_num, output_dir, filename, num_lines, num_batches):
    """Generates passwords and saves them to a file for a single batch."""
    # Generate passwords
    passwords = generate_passwords(num_lines)
    
    # Define the output file name
    batch_file_name = f"{filename.split('.')[0]}_{batch_num}.txt"
    output_file = os.path.join(output_dir, batch_file_name)
    
    # Save passwords and simulate work
    return save_passwords_to_file((passwords, output_file, batch_num, num_batches))


def main(output_dir=DEFAULT_DIRECTORY, filename=DEFAULT_FILENAME, num_lines=DEFAULT_NUM_LINES, num_batches=DEFAULT_NUM_BATCHES):
    """Main function to generate multiple batches of password files with multiprocessing."""
    start_time = datetime.now()
    print(f"Starting password generation at {start_time.strftime('%H:%M:%S')}")
    
    # Create a list of tasks for multiprocessing
    tasks = [(batch_num, output_dir, filename, num_lines, num_batches) for batch_num in range(1, num_batches + 1)]
    
    # Set up multiprocessing Pool
    with Pool(processes=min(cpu_count(), num_batches)) as pool:
        pool.map(process_batch_wrapper, tasks)
    
    end_time = datetime.now()
    duration = end_time - start_time
    print(f"\nYour library {filename} is successfully generated.")
    print(f"Time {start_time.strftime('%H:%M:%S')} to {end_time.strftime('%H:%M:%S')} with duration of {str(duration)}")


def process_batch_wrapper(args):
    """Wrapper function to unpack arguments for multiprocessing."""
    return process_batch(*args)


if __name__ == "__main__":
    # Default arguments or command line input
    if len(sys.argv) > 1:
        output_dir = sys.argv[1]
        filename = sys.argv[2] if len(sys.argv) > 2 else DEFAULT_FILENAME
        num_lines = int(sys.argv[3]) if len(sys.argv) > 3 else DEFAULT_NUM_LINES
        num_batches = int(sys.argv[4]) if len(sys.argv) > 4 else DEFAULT_NUM_BATCHES
    else:
        output_dir = DEFAULT_DIRECTORY
        filename = DEFAULT_FILENAME
        num_lines = DEFAULT_NUM_LINES
        num_batches = DEFAULT_NUM_BATCHES

    main(output_dir, filename, num_lines, num_batches)
